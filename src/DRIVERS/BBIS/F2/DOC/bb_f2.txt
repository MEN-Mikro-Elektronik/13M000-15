Function Description
====================
Fri Jun  9 14:10:11  2000
 
Overview of all Functions
-------------------------

F2_GetEntry            - Initialize drivers jump table. 
F2_Init                - Allocate and return board handle. 
F2_BrdInit             - Board initialization. 
F2_BrdExit             - Board deinitialization. 
F2_Exit                - Cleanup memory. 
F2_BrdInfo             - Get information about hardware and driver requirements. 
F2_CfgInfo             - Get information about board configuration. 
F2_IrqEnable           - Interrupt enable / disable. 
F2_IrqSrvInit          - Called at the beginning of an interrupt. 
F2_IrqSrvExit          - Called at the end of an interrupt. 
F2_ExpEnable           - Exception interrupt enable / disable. 
F2_ExpSrv              - Called at the beginning of an exception interrupt. 
F2_SetMIface           - Set device interface. 
F2_ClrMIface           - Clear device interface. 
F2_GetMAddr            - Get physical address description. 
F2_SetStat             - Set driver status 
F2_GetStat             - Get driver status 
 

Function F2_GetEntry()
----------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        extern void BBIS_GetEntry( BBIS_ENTRY *bbisP )
    #else
    # ifdef F2 
        extern void F2_GetEntry( BBIS_ENTRY *bbisP )
    # endif
    #endif

Description:
    Initialize drivers jump table.

Input:
    bbisP     pointer to the not initialized structure

Output:
    *bbisP    initialized structure


Function F2_Init()
------------------

Syntax:
    static int32 F2_Init(
        OSS_HANDLE      *osHdl,
        DESC_SPEC       *descSpec,
        BBIS_HANDLE     **brdHdlP )

Description:
    Allocate and return board handle.

    - initializes the board handle
    - reads and saves board descriptor entries
    - assign resources
    - map used addresses

    The following descriptor keys are used:

    Deskriptor key           Default          Range
    -----------------------  ---------------  -------------
    DEBUG_LEVEL_DESC         OSS_DBG_DEFAULT  see dbg.h
    DEBUG_LEVEL              OSS_DBG_DEFAULT  see dbg.h
    IRQ_CIO_LM               BIOS setting     0,5,7,9,10,11,12
    IRQ_COM3                 BIOS setting     0,5,7,9,10,11,12
    IRQ_COM4                 BIOS setting     0,5,7,9,10,11,12

    IRQ_.. specifies optionally the IRQ that will be used for
    the Z8536/LM79 device, COM3 port and COM4 port. If IRQ_..
    is present, the IRQ setting from the BIOS will be
    overwritten - otherwise the BIOS mapping will be used. 
    If IRQ_..=0 no IRQ will be assigned.

    Note: The current F2 BIOS doesn't assign any IRQ to the
          Z8536/LM79 device. Therefor IRQ_CIO_LM must be
          specified to provide an IRQ for the device slot 0x1000.

          Furthermore, the current BIOS doesn't assign the proper
          IRQ for COM3/COM4 specified in the BIOS setup. Therefore
          it is recommended to specify IRQ_COM3/4 to select the
          proper IRQs.

Input:
    osHdl     pointer to os specific structure             
    descSpec  pointer to os specific descriptor specifier  
    brdHdlP   pointer to not initialized board handle structure            

Output:
    *brdHdlP  initialized board handle structure  
    return    0 | error code


Function F2_BrdInit()
---------------------

Syntax:
    static int32 F2_BrdInit(
        BBIS_HANDLE     *brdHdl )

Description:
    Board initialization.

    Perform IRQ setting in the FDC37C669 ISA device. 

Input:
    brdHdl    pointer to board handle structure    

Output:
    return    0 | error code


Function F2_BrdExit()
---------------------

Syntax:
    static int32 F2_BrdExit(
        BBIS_HANDLE     *brdHdl )

Description:
    Board deinitialization.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   

Output:
    return    0 | error code


Function F2_Exit()
------------------

Syntax:
    static int32 F2_Exit(
        BBIS_HANDLE     **brdHdlP )

Description:
    Cleanup memory.

    - deinitializes the bbis handle

Input:
    brdHdlP   pointer to board handle structure

Output:
    *brdHdlP  NULL
    return    0 | error code


Function F2_BrdInfo()
---------------------

Syntax:
    static int32 F2_BrdInfo(
        u_int32 code,
        ... )

Description:
    Get information about hardware and driver requirements.

    Following info codes are supported:

    Code                      Description
    ------------------------  -----------------------------
    BBIS_BRDINFO_BUSTYPE      board bustype
    BBIS_BRDINFO_DEVBUSTYPE   device bustype
    BBIS_BRDINFO_FUNCTION     used optional functions
    BBIS_BRDINFO_NUM_SLOTS    number of slots
    BBIS_BRDINFO_INTERRUPTS   interrupt characteristics
    BBIS_BRDINFO_ADDRSPACE    address characteristic

    The BBIS_BRDINFO_BUSTYPE code returns the bustype of
    the specified board.

    The BBIS_BRDINFO_DEVBUSTYPE code returns the bustype of
    the specified device - not the board bus type. 

    The BBIS_BRDINFO_FUNCTION code returns the information
    if an optional BBIS function is supported or not.

    The BBIS_BRDINFO_NUM_SLOTS code returns the number of
    devices used from the driver.

    The BBIS_BRDINFO_INTERRUPTS code returns the supported
    interrupt capability (BBIS_IRQ_DEVIRQ/BBIS_IRQ_EXPIRQ)
    of the specified device.

    The BBIS_BRDINFO_ADDRSPACE code returns the address
    characteristic (OSS_ADDRSPACE_MEM/OSS_ADDRSPACE_IO)
    of the specified device.

Input:
    code      reference to the information we need    
    ...       variable arguments                      

Output:
    *...      variable arguments
    return    0 | error code


Function F2_CfgInfo()
---------------------

Syntax:
    static int32 F2_CfgInfo(
        BBIS_HANDLE     *brdHdl,
        u_int32         code,
        ... )

Description:
    Get information about board configuration.

    Following info codes are supported:

    Code                      Description
    ------------------------  ------------------------------
    BBIS_CFGINFO_BUSNBR       bus number
    BBIS_CFGINFO_IRQ          interrupt parameters
    BBIS_CFGINFO_EXP          exception interrupt parameters
    BBIS_CFGINFO_PCI_DEVNBR   pci device number

    The BBIS_CFGINFO_BUSNBR code returns the number of the
    bus on which the board resides.

    The BBIS_CFGINFO_IRQ code returns the device interrupt
    vector, level and mode of the specified device.

    The BBIS_CFGINFO_EXP code returns the exception interrupt
    vector, level and mode of the specified device.

    The BBIS_CFGINFO_PCI_DEVNBR code are only used for pci
    devices and returns the PCI device number of the specified
    device.

Input:
    brdHdl    pointer to board handle structure       
    code      reference to the information we need    
    ...       variable arguments                      

Output:
    .....:  ...       variable arguments
            return    0 | error code


Function F2_IrqEnable()
-----------------------

Syntax:
    static int32 F2_IrqEnable(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         enable )

Description:
    Interrupt enable / disable.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    enable    interrupt setting                   

Output:
    return    0


Function F2_IrqSrvInit()
------------------------

Syntax:
    static int32 F2_IrqSrvInit(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot)

Description:
    Called at the beginning of an interrupt.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    BBIS_IRQ_UNK


Function F2_IrqSrvExit()
------------------------

Syntax:
    static void F2_IrqSrvExit(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot )

Description:
    Called at the end of an interrupt.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    ---


Function F2_ExpEnable()
-----------------------

Syntax:
    static int32 F2_ExpEnable(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         enable)

Description:
    Exception interrupt enable / disable.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    enable    interrupt setting                   

Output:
    return    0


Function F2_ExpSrv()
--------------------

Syntax:
    static int32 F2_ExpSrv(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot )

Description:
    Called at the beginning of an exception interrupt.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    BBIS_IRQ_NO


Function F2_SetMIface()
-----------------------

Syntax:
    static int32 F2_SetMIface(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         addrMode,
        u_int32         dataMode)

Description:
    Set device interface.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    addrMode  MDIS_MODE_A08 | MDIS_MODE_A24       
    dataMode  MDIS_MODE_F26 | MDIS_MODE_D32       

Output:
    return    0


Function F2_ClrMIface()
-----------------------

Syntax:
    static int32 F2_ClrMIface(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot)

Description:
    Clear device interface.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    0


Function F2_GetMAddr()
----------------------

Syntax:
    static int32 F2_GetMAddr(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         addrMode,
        u_int32         dataMode,
        void            **mAddr,
        u_int32         *mSize )

Description:
    Get physical address description.

    - check device number
    - assign address spaces

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    addrMode  MDIS_MODE_A08 | MDIS_MODE_A24    
    dataMode  MDIS_MODE_F26 | MDIS_MODE_D32      
    mAddr     pointer to address space            
    mSize     size of address space               

Output:
    return    0 | error code


Function F2_SetStat()
---------------------

Syntax:
    static int32 F2_SetStat(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        int32           code,
        int32           value )

Description:
    Set driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_BB_DEBUG_LEVEL     board debug level          see dbg.h

Input:
    brdHdl    pointer to board handle structure           
    mSlot     module slot number                          
    code      setstat code                                
    value     setstat value or ptr to blocksetstat data   

Output:
    return    0 | error code


Function F2_GetStat()
---------------------

Syntax:
    static int32 F2_GetStat(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        int32           code,
        int32           *valueP )

Description:
    Get driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_BB_DEBUG_LEVEL     driver debug level         see dbg.h
    M_BB_IRQ_VECT        interrupt vector           0..max
    M_BB_IRQ_LEVEL       interrupt level            0..max
    M_BB_IRQ_PRIORITY    interrupt priority         0
    M_MK_BLK_REV_ID      ident function table ptr   -

Input:
    brdHdl    pointer to board handle structure           
    mSlot     module slot number                          
    code      getstat code                                

Output:
    valueP    getstat value or ptr to blockgetstat data
    return    0 | error code

