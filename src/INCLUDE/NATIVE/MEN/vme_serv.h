/***********************  I n c l u d e  -  F i l e  ************************
 *
 *         Name: vme_serv.h
 *
 *       Author: kp
 *        $Date: 2009/10/23 20:02:44 $
 *    $Revision: 1.2 $
 *
 *  Description: header file for use with MEN QNX VME server
 *
 *     Switches: -
 *
 *-------------------------------[ History ]---------------------------------
 *
 * $Log: vme_serv.h,v $
 * Revision 1.2  2009/10/23 20:02:44  channoyer
 * R: Support for TSI148 VME bridge
 * M: New defines
 *
 * Revision 1.1  2002/04/26 16:25:21  kp
 * Initial Revision
 *
 *---------------------------------------------------------------------------
 * (c) Copyright 2002-2009 by MEN Mikro Elektronik GmbH, Nuremberg, Germany
 ****************************************************************************/

#ifndef _VME_SERV_H
#define _VME_SERV_H

#ifdef __cplusplus
	extern "C" {
#endif

#include	<sys/iomsg.h>
#include	<sys/siginfo.h>

typedef uint64_t vmeaddr_t;

/**********************************************************************/
/** VME space definitions
 *
 */
/* TODO check header and comments */
typedef enum {
	VME_SPC_A16_D16=0,			/**< Short non priviledged (D16) */
	VME_SPC_A16_D16_BLT=1,		/**< Short non priviledged (D16-BLT), n/a */
	VME_SPC_A16_D32=2,			/**< Short non priviledged (D32) */
	VME_SPC_A16_D32_BLT=3,		/**< Short non priviledged (D32-BLT), n/a */
	VME_SPC_A24_D16=4,			/**< Standard non priviledged (D16) */
	VME_SPC_A24_D16_BLT=5,		/**< Standard non priviledged (D16-BLT) */
	VME_SPC_A24_D32=6,			/**< Standard non priviledged (D32) */
	VME_SPC_A24_D32_BLT=7,		/**< Standard non priviledged (D32-BLT) */
	VME_SPC_A32_D32=8,			/**< Extended non priviledged (D32) */
	VME_SPC_A32_D32_BLT=9,		/**< Extended non priviledged (D32-BLT) */
	VME_SPC_A32_D64_BLT=10,		/**< Extended non priviledged (D64-BLT) */

	VME_SPC_SLV0=11,			/**< slave (inbound) window #0 */
	VME_SPC_SLV1=12,			/**< slave (inbound) window #1 */
	VME_SPC_SLV2=13,			/**< slave (inbound) window #2 */
	VME_SPC_SLV3=14,			/**< slave (inbound) window #3 */
	VME_SPC_SLV4=15,			/**< slave (inbound) window #4 */
	VME_SPC_SLV5=16,			/**< slave (inbound) window #5 */
	VME_SPC_SLV6=17,			/**< slave (inbound) window #6 */
	VME_SPC_SLV7=18,			/**< slave (inbound) window #7 */

	VME_SPC_MST0=19,			/**< master (outbound) window #0 */
	VME_SPC_MST1=20,			/**< master (outbound) window #1 */
	VME_SPC_MST2=21,			/**< master (outbound) window #2 */
	VME_SPC_MST3=22,			/**< master (outbound) window #3 */
	VME_SPC_MST4=23,			/**< master (outbound) window #4 */
	VME_SPC_MST5=24,			/**< master (outbound) window #5 */
	VME_SPC_MST6=25,			/**< master (outbound) window #6 */
	VME_SPC_MST7=26,			/**< master (outbound) window #7 */

	VME_SPC_A64_D32=27,			/**< Long non priviledged (D32) */
	VME_SPC_A64_2EVME=28,		/**< Long non priviledged (2eVME) */
	VME_SPC_A64_2ESST=29,		/**< Long non priviledged (2eSST) */

	VME_SPC_INVALID=255
} VME_SPACE;

/*--------------------------------------+
|   DEFINES                             |
+--------------------------------------*/

#define VME_SERV_NAME "/dev/vme"

/* value for _vme_message.msg_hdr.i.mgrid */
#define _IOMGR_VME 0xf002

/* values for _vme_message.msg_hdr.i.subtype */
#define IOM_VME_IRQ_ATTACH	1
#define IOM_VME_IRQ_DETACH	2
#define IOM_VME_ISSUE_IRQ	3
#define IOM_VME_CHECK_IRQ	4
#define IOM_VME_IRQ_MASK	5
#define IOM_VME_IRQ_UNMASK	6
#define IOM_VME_BUS_TO_PHYS 7


/* TODO check header and comments */
/**********************************************************************/
/** \defgroup VME4L_IRQVEC VME interrupt vectors.
 * Numbers 0 to 0x100 correspond to VME vectors.
 * Numbers above 0x100 are pseudo vectors for interrupts generated by the VME
 * bridge.
 *  @{
 */
/** spurious VME interrupt */
#define VME_IRQVEC_SPUR	 		0x100
/** fake vector for bus error interrupt */
#define VME_IRQVEC_BUSERR 		0x101
/** fake vector for ACFAIL interrupt */
#define VME_IRQVEC_ACFAIL 		0x102
/** fake vector for SYSFAIL interrupt */
#define VME_IRQVEC_SYSFAIL 		0x103
/** fake vector for mailbox _n interrupt caused by VME read access */
#define VME_IRQVEC_MBOXRD(_n)		(0x110+((_n)*2))
/** fake vector for mailbox _n interrupt caused by VME write access */
#define VME_IRQVEC_MBOXWR(_n)		(0x111+((_n)*2))
/** fake vector for location monitor n interrupt */
#define VME_IRQVEC_LOCMON(_n)		(0x120+(_n))

/* TODO check header and comments */
/***********************************************************************/
/** \defgroup VME4L_IRQLEV VME interrupt levels.
 * Numbers 1 to 7 correspond to the VME IRQ lines 1 to 7. 
 * Numbers above 7 are special VME interrupts generated by the VME
 * bridge.
 *  @{
 */
#define VME_IRQLEV_UNKNOWN		0 /**< IRQ level unknown */
#define VME_IRQLEV_1			1 /**< VME IRQ level 1  */
#define VME_IRQLEV_2			2 /**< VME IRQ level 2  */
#define VME_IRQLEV_3			3 /**< VME IRQ level 3  */
#define VME_IRQLEV_4			4 /**< VME IRQ level 4  */
#define VME_IRQLEV_5			5 /**< VME IRQ level 5  */
#define VME_IRQLEV_6			6 /**< VME IRQ level 6  */
#define VME_IRQLEV_7			7 /**< VME IRQ level 7  */

/** fake level for bus error interrupt */
#define VME_IRQLEV_BUSERR 		8
/** fake level for ACFAIL interrupt */
#define VME_IRQLEV_ACFAIL 		9
/** fake level for SYSFAIL interrupt */
#define VME_IRQLEV_SYSFAIL 		10
/** fake level for mailbox _n interrupt caused by VME read access */
#define VME_IRQLEV_MBOXRD(_n)		(0x10+((_n)*2))
/** fake level for mailbox _n interrupt caused by VME write access */
#define VME_IRQLEV_MBOXWR(_n)		(0x11+((_n)*2))
/** fake level for location monitor n interrupt */
#define VME_IRQLEV_LOCMON(_n)		(0x20+(_n))

#define VME_NUM_LEVELS			0x30
/*! @} */

/* NYI */
//#define IOM_VME_BLT			xx
//#define IOM_VME_CHECK_BLT   xx

/*--------------------------------------+
|   TYPDEFS                             |
+--------------------------------------*/

struct	_vme_message {
	io_msg_t msg_hdr;

	union {
		struct {				/* IRQ_ATTACH/DETACH */
			int vector;			/* input */
			int level;			/* input */
			struct sigevent event; /* input */
			unsigned flags;		/* input */
			int id;				/* DETACH: input, ATTACH:output*/
		} irqAttach;

		int irqLevels;			/* output: CHECK_IRQ */

		struct {				/* IRQ_MASK/IRQ_UNMASK */
			int id;				/* input */
			int level;			/* input */
		} irqMask;

		struct {				/* ISSUE_IRQ */
			int level;			/* input */
			int vector;			/* input */
		} issueIrq;

		struct {				/* BUS_TO_PHYS */
			unsigned space;		/* input */
			unsigned long vmeAdrs; /* input */
			uint64_t physAdrs;	/* output */
		} busToPhys;

		struct {				/* BLT */
			void *memAddr;		/* input */
			unsigned vmeMode;	/* input */
			unsigned vmeAddr;	/* input */
			unsigned size;		/* input */
			unsigned vOn;		/* input */
			unsigned vOff;		/* input */
		} blt;

	} p;
};

/*--------------------------------------+
|   EXTERNALS                           |
+--------------------------------------*/
/* none */

/*--------------------------------------+
|   GLOBALS                             |
+--------------------------------------*/
/* none */

/*--------------------------------------+
|   PROTOTYPES                          |
+--------------------------------------*/
/* none */

#ifdef __cplusplus
	}
#endif

#endif	/* _VME_SERV_H */










